{
  "default template": {
    "prefix": "main",
    "body": [
      "#include <stdio.h>",
      "",
      "int main(int argc, char **argv) {",
      "\t$0",
      "\treturn 0;",
      "}"
    ],
    "description": "standard template for a C program"
  },
  "default template (void)": {
    "prefix": "mainn",
    "body": [
      "#include <stdio.h>",
      "",
      "int main(void) {",
      "\t$0",
      "\treturn 0;",
      "}"
    ],
    "description": "standard template for a C program (void)"
  },
  "for": {
    "prefix": "for",
    "body": [
      "for (${1:size_t} ${2:i} = ${3:0}; $2 < ${4:n}; $2 += 1) {",
      "\t$0",
      "}"
    ],
    "description": "snippet for for loop"
  },
  "forr": {
    "prefix": "forr",
    "body": [
      "for (${1:size_t} ${2:i} = ${3:n} - 1; $2 >= ${4:0}; $2 -= 1) {",
      "\t$0",
      "}"
    ],
    "description": "snippet for reversed for loop"
  },
  "while": {
    "prefix": "wh",
    "body": ["while ($1) {", "\t$0", "}"],
    "description": "snippet for while loop"
  },
  "if": {
    "prefix": "if",
    "body": ["if ($1) {", "\t$0", "}"],
    "description": "snippet for if statement"
  },
  "else": {
    "prefix": "el",
    "body": ["else {", "\t$0", "}"],
    "description": "snippet for else statement"
  },
  "else if": {
    "prefix": "elif",
    "body": ["else if ($1) {", "\t$0", "}"],
    "description": "snippet for else-if statement"
  },
  "enum": {
    "prefix": "enum",
    "body": ["enum ${1:MyEnum} {", "\t$0", "};"],
    "description": "enum"
  },
  "#ifdef": {
    "prefix": "ifd",
    "body": ["#ifdef ${1:DEBUG}", "$0", "#endif /* $1 */"],
    "description": "snippet for #ifdef"
  },
  "#ifndef": {
    "prefix": "ifnd",
    "body": ["#ifndef ${1:DEBUG}", "$0", "#endif /* !$1 */"],
    "description": "snippet for #ifndef"
  },
  "struct": {
    "prefix": "st",
    "body": ["struct ${1:Struct} {", "\t$0", "};"],
    "description": "snippet for struct"
  },
  "typedef struct": {
    "prefix": "stt",
    "body": ["typedef struct {", "\t$0", "} ${1:Struct};"],
    "description": "snippet for typedef'd struct"
  },
  "switch": {
    "prefix": "sw",
    "body": ["switch (${1:x}) {", "case ${2:y}:", "\t$0", "\tbreak;", "}"],
    "description": "snippet for switch statement"
  },
  "case": {
    "prefix": "ca",
    "body": ["case $1:", "\t$0", "\tbreak;"],
    "description": "snippet for case branch"
  },
  "union": {
    "prefix": "un",
    "body": ["union ${1:Union} {", "\t$0", "};"],
    "description": "snippet for union"
  },
  "include system header": {
    "prefix": "inc",
    "body": ["#include <$1.h>"],
    "description": "snippet for #include < >"
  },
  "include header": {
    "prefix": "inch",
    "body": ["#include \"$1.h\"$0"],
    "description": "snippet for #include \" \""
  },
  "header guard": {
    "prefix": "guard",
    "body": [
      "#ifndef ${1:token}",
      "#define ${1:token}",
      "\n$0\n",
      "#endif"
    ],
    "description": "snippet for header guard"
  },
  "def": {
    "prefix": "df",
    "body": ["#define $1"],
    "description": "snippet for #define"
  },
  "do...while loop": {
    "prefix": "do",
    "body": ["do {", "\t$1", "} while($2);"],
    "description": "snippet for do-while loop"
  },
  "function": {
    "prefix": "fn",
    "body": ["${1:void} ${2:fn}(${3:void}) {", "\t$0", "}"],
    "description": "snippet for new function"
  },
  "printf": {
    "prefix": "pr",
    "body": ["printf(\"$1\\n\"$0);"],
    "description": "snippet for printf()"
  },
  "sprintf": {
    "prefix": "spr",
    "body": ["sprintf($1, \"$2\\n\"$0);"],
    "description": "snippet for sprintf()"
  },
  "fprintf": {
    "prefix": "fpr",
    "body": ["fprintf(${1:stderr}, \"$2\\n\"$0);"],
    "description": "snippet for fprintf()"
  },
  "scanf": {
    "prefix": "scf",
    "body": ["scanf(\"$1\"$0);"],
    "description": "snippet for scanf()"
  },
  "sscanf": {
    "prefix": "sscf",
    "body": ["sscanf($1, \"$2\"$0);"],
    "description": "snippet for sscanf()"
  },
  "fscanf": {
    "prefix": "fscf",
    "body": ["fscanf($1, \"$2\"$0);"],
    "description": "snippet for fscan()"
  }
}
